package org.example.grpc.server;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.google.protobuf.ByteString;import com.user.*;import io.grpc.stub.StreamObserver;import net.devh.boot.grpc.server.service.GrpcService;import org.example.model.Account;import org.example.service.AccountService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.SerializationUtils;import javax.management.RuntimeErrorException;import java.util.Objects;@GrpcServicepublic class AccountGrpcServer extends UserServiceGrpc.UserServiceImplBase {    @Autowired    private AccountService accountService;    @Override    public void saveUserAccount(UserReq request, StreamObserver<UserRes> responseObserver) {        try {            Integer authorId = request.getId();            String name = request.getName();            String rollbackId = request.getRollbackId();            Account account = new Account();            account.setName(name);            account.setAgentId(authorId);            account.setRollbackId(rollbackId);            boolean isSave = accountService.insert(account);            UserRes.Builder response = UserRes.newBuilder();            response.setUserResponse(ByteString.copyFrom(Objects.requireNonNull(SerializationUtils.serialize(isSave))));            responseObserver.onNext(response.build());        }catch (Exception e){            responseObserver.onNext(null);            responseObserver.onError(e);            System.out.println(e.getMessage() + " ----------------------------------------------");            throw new RuntimeException(e.getMessage());        }finally {            responseObserver.onCompleted();        }    }    @Override    public void transactionalCompensation(UserReq request, StreamObserver<transactionalResponse> responseObserver) {        try {            Integer authorId = request.getId();            String name = request.getName();            String rollbackId = request.getRollbackId();            boolean isDeleted = accountService.remove(new QueryWrapper<Account>().eq("rollbackId", rollbackId));            transactionalResponse.Builder transactionalResponse = com.user.transactionalResponse.newBuilder();            transactionalResponse.setResponse(isDeleted);            responseObserver.onNext(transactionalResponse.build());        }catch (Exception e){            responseObserver.onError(new Throwable("rollback Failed"));            responseObserver.onNext(null);            throw new RuntimeErrorException(new Error("account save failed"));        }finally {            responseObserver.onCompleted();        }    }    @Override    public void transactionalCompensationAccount(UserAccountReq request, StreamObserver<UserAccountRes> responseObserver) {        try {            Integer authorId = request.getId();            String rollbackId = request.getRollbackId();            boolean isDeleted = accountService.remove(new QueryWrapper<Account>().eq("rollbackId", rollbackId));            UserAccountRes.Builder transactionalResponse = UserAccountRes.newBuilder();            transactionalResponse.setResponse(isDeleted);            responseObserver.onNext(transactionalResponse.build());        }catch (Exception e){            responseObserver.onError(new Throwable("rollback Failed"));            responseObserver.onNext(null);            throw new RuntimeErrorException(new Error("account save failed"));        }finally {            responseObserver.onCompleted();        }    }}