package org.example.grpc.server;import com.account.AccountChoreReq;import com.account.AccountChoreRes;import com.account.AccountServiceGrpc;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import io.grpc.stub.StreamObserver;import net.devh.boot.grpc.server.service.GrpcService;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.example.commonModels.AgentChore;import org.example.model.AccChore;import org.example.repository.AccChoreDao;import org.springframework.jdbc.core.JdbcTemplate;@GrpcServicepublic class AccountChoreGrpcServer extends AccountServiceGrpc.AccountServiceImplBase {    private AccChoreDao accChoreDao;    private final RocketMQTemplate rocketMQTemplate;    private final JdbcTemplate jdbcTemplate;    public AccountChoreGrpcServer(AccChoreDao accChoreDao, RocketMQTemplate rocketMQTemplate, JdbcTemplate jdbcTemplate) {        this.accChoreDao = accChoreDao;        this.rocketMQTemplate = rocketMQTemplate;        this.jdbcTemplate = jdbcTemplate;    }    @Override    public void accountChoreSave(AccountChoreReq request, StreamObserver<AccountChoreRes> responseObserver) {        AccChore accChore = new AccChore();        accChore.setRollbackId(request.getRollbackId());        accChore.setName(request.getName());        try {            accChoreDao.insert(accChore);            rocketMQTemplate.convertAndSend("accountTopic", accChore);            AccountChoreRes.Builder res = AccountChoreRes.newBuilder().setResponse(true);            responseObserver.onNext(res.build());//            throw new RuntimeException("");  // todo: this is for testing purpose        }catch (RuntimeException e){            rollbackAgent(accChore.getRollbackId());            AgentChore agentChore = new AgentChore();            rocketMQTemplate.convertAndSend("AgentRollbackTopic", agentChore);            responseObserver.onNext(null);            responseObserver.onError(e);            throw e;        }        finally {            responseObserver.onCompleted();        }    }    // this for compensation    public void rollbackAgent(String rollbackId) {        accChoreDao.delete(new QueryWrapper<AccChore>().eq("rollbackId", rollbackId));        resetAutoIncrement();    }    private void resetAutoIncrement() {        Long maxId = accChoreDao.selectMaxId();        if (maxId != null) {            // Set the AUTO_INCREMENT value to maxId + 1            accChoreDao.resetAutoIncrement(maxId + 1);        }    }}