package org.example.service.orchestorCalls;import com.devProblems.BookAuthorServiceGrpc;import com.devProblems.BookReq;import io.grpc.Status;import io.grpc.StatusRuntimeException;import org.example.interfaces.SagaSteps;import org.example.model.Author;public class SaveBook implements SagaSteps {    private final BookAuthorServiceGrpc.BookAuthorServiceBlockingStub bookAuthorServiceBlockingStub;    private final Author author;    public SaveBook(BookAuthorServiceGrpc.BookAuthorServiceBlockingStub bookAuthorServiceBlockingStub, Author author) {        this.bookAuthorServiceBlockingStub = bookAuthorServiceBlockingStub;        this.author = author;    }    @Override    public void execute() {        BookReq bookReq = BookReq.newBuilder()                .setId(author.getId())                .setName(author.getName())                .setRollbackId(author.getRollbackId())                .build();        Boolean res = bookAuthorServiceBlockingStub.saveBook(bookReq).getBookResponse();        if (!Boolean.TRUE.equals(res)) {            throw new RuntimeException("Failed to save book");        }    }    @Override    public void compensate() {        // Implement compensation logic if necessary        try {            BookReq bookReq = BookReq.newBuilder()                    .setRollbackId(author.getRollbackId())                    .build();            boolean serializable = bookAuthorServiceBlockingStub.transactionalRollBack(bookReq).getResponse();            System.out.println(serializable+ " : rollback status from book");        }catch (RuntimeException e){            throw new StatusRuntimeException(Status.ABORTED);        }    }}