package org.example.service.orchestorCalls;import com.user.UserAccountReq;import com.user.UserReq;import com.user.UserServiceGrpc;import io.grpc.Status;import io.grpc.StatusRuntimeException;import org.example.interfaces.SagaSteps;import org.example.model.Author;import org.springframework.util.SerializationUtils;public class SaveUserAccount implements SagaSteps {    private final UserServiceGrpc.UserServiceBlockingStub userServiceBlockingStub;    private final Author author;    public SaveUserAccount(UserServiceGrpc.UserServiceBlockingStub userServiceBlockingStub, Author author) {        this.userServiceBlockingStub = userServiceBlockingStub;        this.author = author;    }    @Override    public void execute() {        UserReq userReq = UserReq.newBuilder()                .setId(author.getId())                .setName(author.getName())                .setRollbackId(author.getRollbackId())                .build();        byte[] response = userServiceBlockingStub.saveUserAccount(userReq).getUserResponse().toByteArray();        Boolean out = (Boolean) SerializationUtils.deserialize(response);        if (!Boolean.TRUE.equals(out)) {            throw new RuntimeException("Failed to save user account");        }    }    @Override    public void compensate() {        // Implement compensation logic if necessary        try {            UserAccountReq userAccountReq = UserAccountReq.newBuilder()                    .setName(author.getName())                    .setAgentId(author.getId())                    .setRollbackId(author.getRollbackId())                    .build();            boolean serialTransfer = userServiceBlockingStub.transactionalCompensationAccount(userAccountReq).getResponse();            System.out.println(serialTransfer+ " :account rollback");        }catch(Exception e){            throw new StatusRuntimeException(Status.ABORTED);        }    }}