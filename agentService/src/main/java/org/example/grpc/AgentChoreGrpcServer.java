package org.example.grpc;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.devProblems.AgentChoreReq;import com.devProblems.AgentChoreRes;import com.devProblems.AgentChoreServiceGrpc;import io.grpc.stub.StreamObserver;import net.devh.boot.grpc.server.service.GrpcService;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.example.commonModels.AgentChore;import org.example.commonModels.UserChore;import org.example.repository.AgentChoreDao;import org.springframework.jdbc.core.JdbcTemplate;@GrpcServicepublic class AgentChoreGrpcServer extends AgentChoreServiceGrpc.AgentChoreServiceImplBase {    private final AgentChoreDao agentChoreDao;    private final RocketMQTemplate rocketMQTemplate;    private final JdbcTemplate jdbcTemplate;    public AgentChoreGrpcServer(AgentChoreDao agentChoreDao, RocketMQTemplate rocketMQTemplate, JdbcTemplate jdbcTemplate) {        this.agentChoreDao = agentChoreDao;        this.rocketMQTemplate = rocketMQTemplate;        this.jdbcTemplate = jdbcTemplate;    }    @Override    public void agentSave(AgentChoreReq request, StreamObserver<AgentChoreRes> responseObserver) {        AgentChore agentChore = new AgentChore();        agentChore.setName(request.getName());        agentChore.setRollbackId(request.getRollbackId());        try {            agentChoreDao.insert(agentChore);            rocketMQTemplate.convertAndSend("AgentTopic", agentChore);            AgentChoreRes.Builder res = AgentChoreRes.newBuilder().setResponse(true);            responseObserver.onNext(res.build());//            throw new RuntimeException("");  // todo: this is for testing purpose        }catch (RuntimeException e){            rollbackAgent(agentChore.getRollbackId());            UserChore user = new UserChore();            rocketMQTemplate.convertAndSend("UserRollbackTopic", user);            responseObserver.onNext(null);            responseObserver.onError(e);            throw e;        }        finally {            responseObserver.onCompleted();        }    }    // this for compensation    public void rollbackAgent(String rollbackId) {        agentChoreDao.delete(new QueryWrapper<AgentChore>().eq("rollbackId", rollbackId));        resetAutoIncrement();    }    private void resetAutoIncrement() {//        String sql = "ALTER TABLE user AUTO_INCREMENT = 1";//        jdbcTemplate.execute(sql);        // Retrieve the current maximum ID        Long maxId = agentChoreDao.selectMaxId();        if (maxId != null) {            // Set the AUTO_INCREMENT value to maxId + 1            agentChoreDao.resetAutoIncrement(maxId + 1);        }    }}